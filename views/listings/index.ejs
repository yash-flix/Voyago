<% layout("/layouts/boilerplate.ejs") %>

<style>
  body {
    background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #334155 100%);
    min-height: 100vh;
    font-family: "Plus Jakarta Sans", sans-serif;
    font-optical-sizing: auto;
    font-weight: 400;
    overflow-x: hidden;
  }

  #globe-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
    pointer-events: none;
  }

  .grid-pattern-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 2;
    pointer-events: none;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .grid-pattern {
    width: 800px;
    height: 600px;
    opacity: 0.4;
  }

  .grid-block {
    transition: fill 0.5s ease;
  }

  .content-wrapper {
    position: relative;
    z-index: 10;
    min-height: 100vh;
    padding-bottom: 2rem;
  }

  .listings-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 2rem;
    padding: 1rem;
  }

  .listing-link {
    text-decoration: none;
    color: inherit;
    display: block;
  }

  .listing-link:hover {
    text-decoration: none;
    color: inherit;
  }

  .listing-card {
    display: flex;
    flex-direction: column;
    height: 100%;
    border-radius: 16px;
    overflow: hidden;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    position: relative;
  }

  .listing-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 15px 40px rgba(0, 0, 0, 0.4);
  }

  .card-image {
    width: 100%;
    height: 240px;
    object-fit: cover;
    object-position: center;
  }

  .card-img-overlay {
    position: absolute;
    top: 1rem;
    right: 1rem;
    opacity: 0;
    font-size: 24px;
    color: #ff6b6b;
    font-weight: bold;
    transition: opacity 0.3s ease;
    z-index: 2;
  }

  .listing-card:hover .card-img-overlay {
    opacity: 1;
  }

  .card-content {
    padding: 0;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    position: relative;
    background: linear-gradient(transparent 60%, rgba(0,0,0,0.6) 100%);
    margin-top: -60px;
    z-index: 1;
  }

  .card-title {
    font-size: 1.1rem;
    font-weight: 600;
    margin-bottom: 0.25rem;
    color: white;
    line-height: 1.3;
    padding: 0 1rem;
    margin-top: auto;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
  }

  .card-price {
    font-size: 0.9rem;
    font-weight: 500;
    color: white;
    margin-bottom: 1rem;
    padding: 0 1rem;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
  }

  .card-location {
    color: #6b7280;
    font-size: 0.85rem;
    margin-bottom: 1.25rem;
    font-weight: 400;
    display: none;
  }

  .page-header {
    text-align: center;
    margin: 2rem 0 3rem 0;
    color: rgba(255, 255, 255, 0.95);
    font-size: 3rem;
    font-weight: 800;
    text-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
    background: linear-gradient(135deg, #ffffff 0%, #22d3ee 50%, #06b6d4 100%);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  @media (max-width: 768px) {
    .listings-container {
      grid-template-columns: 1fr;
      gap: 1.5rem;
      padding: 0.5rem;
    }
    
    .page-header {
      font-size: 2.5rem;
      margin: 1.5rem 0 2rem 0;
    }
  }
</style>

<body>
  <!-- Globe Background -->
  <div id="globe-container"></div>

  <!-- Grid Pattern Overlay -->
  <div class="grid-pattern-container">
    <svg class="grid-pattern" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <pattern id="gridPattern" x="0" y="0" width="64" height="64" patternUnits="userSpaceOnUse">
          <path d="M64 0H0v64h64V0zM64 0v64M0 0v64" stroke="rgba(255,255,255,0.08)" stroke-width="1.5" fill="none"/>
        </pattern>
        <mask id="gridMask">
          <ellipse cx="256" cy="200" rx="250" ry="180" fill="white"/>
        </mask>
      </defs>
      <rect width="100%" height="100%" fill="url(#gridPattern)" mask="url(#gridMask)" transform="skewY(8)"/>
      <!-- Highlighted blocks -->
      <rect x="64" y="64" width="64" height="64" fill="rgba(255,255,255,0.03)" class="grid-block" transform="skewY(8)"/>
      <rect x="128" y="192" width="64" height="64" fill="rgba(255,255,255,0.03)" class="grid-block" transform="skewY(8)"/>
      <rect x="192" y="128" width="64" height="64" fill="rgba(255,255,255,0.03)" class="grid-block" transform="skewY(8)"/>
      <rect x="256" y="256" width="64" height="64" fill="rgba(255,255,255,0.03)" class="grid-block" transform="skewY(8)"/>
      <rect x="320" y="96" width="64" height="64" fill="rgba(255,255,255,0.03)" class="grid-block" transform="skewY(8)"/>
      <rect x="384" y="224" width="64" height="64" fill="rgba(255,255,255,0.03)" class="grid-block" transform="skewY(8)"/>
    </svg>
  </div>

  <!-- Content Wrapper -->
  <div class="content-wrapper">
    <h1 class="page-header">All Listings</h1>

    <div class="listings-container">
      <% for(let listing of allListings) { %>
        <a href="/listings/<%= listing._id %>" class="listing-link">
          <div class="listing-card">
            <img src="<%= listing.image %>" class="card-image" alt="<%= listing.title %>">
            <div class="card-img-overlay">&#10084;</div>	
            <div class="card-content">
              <h5 class="card-title"><%= listing.title %></h5>
              <p class="card-price">â‚¹<%= listing.price.toLocaleString("en-IN") %>/night</p>
              <p class="card-location"><%= listing.location %>, <%= listing.country %></p>
            </div>
          </div>
        </a>
      <% } %>
    </div>
  </div>

  <!-- Three.js Script -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script>
    let scene, camera, renderer, globe, globeGroup, markers = [];
    let mouseX = 0, mouseY = 0;
    let targetRotationX = 0, targetRotationY = 0;

    function init() {
      // Scene setup
      scene = new THREE.Scene();
      
      // Camera setup for background position
      camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);
      camera.position.set(400, 100, 800);
      
      // Renderer setup
      const container = document.getElementById('globe-container');
      renderer = new THREE.WebGLRenderer({ 
        alpha: true, 
        antialias: true 
      });
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.setClearColor(0x000000, 0);
      container.appendChild(renderer.domElement);
      
      // Create globe group for rotation
      globeGroup = new THREE.Group();
      scene.add(globeGroup);
      
      createGlobe();
      createMarkers();
      
      // Mouse interaction
      document.addEventListener('mousemove', onMouseMove, false);
      
      animate();
    }

    function createGlobe() {
      // Large background globe
      const radius = 200;
      const widthSegments = 40;
      const heightSegments = 40;
      
      const geometry = new THREE.SphereGeometry(radius, widthSegments, heightSegments);
      
      // Subtle wireframe for background
      const material = new THREE.MeshBasicMaterial({
        color: 0x777A80,
        wireframe: true,
        transparent: true,
        opacity: 0.3
      });
      
      globe = new THREE.Mesh(geometry, material);
      globeGroup.add(globe);
      
      // Soft glow effect
      const glowGeometry = new THREE.SphereGeometry(radius + 10, 32, 32);
      const glowMaterial = new THREE.MeshBasicMaterial({
        color: 0x22d3ee,
        transparent: true,
        opacity: 0.05,
        side: THREE.BackSide
      });
      
      const glow = new THREE.Mesh(glowGeometry, glowMaterial);
      globeGroup.add(glow);
    }

    function createMarkers() {
      const markerPositions = [
        { lat: 40.7128, lng: -74.0060 },
        { lat: 51.5074, lng: -0.1278 },
        { lat: 35.6762, lng: 139.6503 },
        { lat: -33.8688, lng: 151.2093 },
        { lat: 19.4326, lng: -99.1332 },
        { lat: 55.7558, lng: 37.6176 },
        { lat: -1.2921, lng: 36.8219 },
        { lat: -23.5505, lng: -46.6333 },
      ];
      
      markerPositions.forEach(pos => {
        const marker = createMarker(pos.lat, pos.lng);
        globeGroup.add(marker);
        markers.push(marker);
      });
    }

    function createMarker(lat, lng) {
      const radius = 200;
      
      // Convert lat/lng to 3D coordinates
      const phi = (90 - lat) * (Math.PI / 180);
      const theta = (lng + 180) * (Math.PI / 180);
      
      const x = -((radius + 3) * Math.sin(phi) * Math.cos(theta));
      const z = ((radius + 3) * Math.sin(phi) * Math.sin(theta));
      const y = ((radius + 3) * Math.cos(phi));
      
      // Create subtle markers
      const markerGeometry = new THREE.SphereGeometry(2, 8, 8);
      const markerMaterial = new THREE.MeshBasicMaterial({
        color: 0x22d3ee,
        transparent: true,
        opacity: 0.8
      });
      
      const marker = new THREE.Mesh(markerGeometry, markerMaterial);
      marker.position.set(x, y, z);
      
      return marker;
    }

    function onMouseMove(event) {
      mouseX = (event.clientX - window.innerWidth / 2) * 0.0002;
      mouseY = (event.clientY - window.innerHeight / 2) * 0.0002;
      
      targetRotationY = mouseX;
      targetRotationX = mouseY;
    }

    function animate() {
      requestAnimationFrame(animate);
      
      // Very subtle rotation based on mouse
      globeGroup.rotation.y += (targetRotationY - globeGroup.rotation.y) * 0.02;
      globeGroup.rotation.x += (targetRotationX - globeGroup.rotation.x) * 0.02;
      
      // Slow continuous rotation
      globeGroup.rotation.y += 0.0005;
      
      // Subtle marker animation
      markers.forEach((marker, index) => {
        const time = Date.now() * 0.0005;
        const scale = 1 + Math.sin(time + index) * 0.2;
        marker.scale.setScalar(scale);
      });
      
      renderer.render(scene, camera);
    }

    function onWindowResize() {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    }

    window.addEventListener('resize', onWindowResize, false);

    // Initialize
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', init);
    } else {
      init();
    }
  </script>
</body>