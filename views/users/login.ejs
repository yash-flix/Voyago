<% layout("/layouts/boilerplate.ejs") %>

<style>
  body {
    background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #334155 100%);
    height: 100vh;
    font-family: "Plus Jakarta Sans", sans-serif;
    font-optical-sizing: auto;
    font-weight: 400;
    overflow: hidden;
    margin: 0;
    padding: 0;
  }

  #globe-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
    pointer-events: none;
    opacity: 0.4;
  }

  .auth-container {
    position: relative;
    z-index: 10;
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1rem;
  }

  .auth-card {
    background: rgba(30, 41, 59, 0.95);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.15);
    border-radius: 20px;
    padding: 1.8rem 2rem;
    width: 100%;
    max-width: 380px;
    box-shadow: 0 20px 40px -12px rgba(0, 0, 0, 0.5);
  }

  .auth-title {
    font-size: 1.8rem;
    font-weight: 800;
    text-align: center;
    margin: 0 0 0.5rem 0;
    background: linear-gradient(135deg, #ffffff 0%, #22d3ee 50%, #06b6d4 100%);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  .auth-subtitle {
    text-align: center;
    color: rgba(255, 255, 255, 0.7);
    margin-bottom: 1.5rem;
    font-size: 0.85rem;
  }

  .form-group {
    margin-bottom: 1rem;
  }

  .form-label {
    display: block;
    margin-bottom: 0.3rem;
    color: rgba(255, 255, 255, 0.9);
    font-weight: 600;
    font-size: 0.8rem;
  }

  .form-control {
    width: 100%;
    padding: 0.7rem 0.8rem;
    background: rgba(255, 255, 255, 0.12);
    border: 1.5px solid rgba(255, 255, 255, 0.25);
    border-radius: 8px;
    color: white;
    font-size: 0.9rem;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
    box-sizing: border-box;
  }

  .form-control::placeholder {
    color: rgba(255, 255, 255, 0.5);
    font-size: 0.85rem;
  }

  .form-control:focus {
    outline: none;
    border-color: #22d3ee;
    background: rgba(255, 255, 255, 0.18);
    box-shadow: 0 0 0 2px rgba(34, 211, 238, 0.2);
  }

  .btn-auth {
    width: 100%;
    background: linear-gradient(135deg, #22d3ee, #06b6d4);
    color: white;
    padding: 0.75rem;
    border-radius: 8px;
    font-weight: 700;
    font-size: 0.95rem;
    transition: all 0.3s ease;
    border: none;
    cursor: pointer;
    box-shadow: 0 8px 20px rgba(34, 211, 238, 0.35);
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-top: 0.5rem;
  }

  .btn-auth:hover {
    transform: translateY(-1px);
    box-shadow: 0 12px 25px rgba(34, 211, 238, 0.45);
  }

  .forgot-password {
    text-align: center;
    margin: 1rem 0 0.5rem 0;
  }

  .forgot-password a {
    color: rgba(255, 255, 255, 0.6);
    text-decoration: none;
    font-size: 0.75rem;
    transition: color 0.3s ease;
  }

  .forgot-password a:hover {
    color: #22d3ee;
    text-decoration: none;
  }

  .auth-footer {
    text-align: center;
    margin-top: 1.2rem;
    padding-top: 1.2rem;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
  }

  .auth-footer p {
    color: rgba(255, 255, 255, 0.7);
    margin: 0 0 0.7rem 0;
    font-size: 0.8rem;
  }

  .btn-secondary-auth {
    width: 100%;
    background: rgba(255, 255, 255, 0.1);
    color: white;
    padding: 0.65rem;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 600;
    font-size: 0.85rem;
    transition: all 0.3s ease;
    border: 1px solid rgba(255, 255, 255, 0.25);
    backdrop-filter: blur(10px);
    text-align: center;
    display: block;
  }

  .btn-secondary-auth:hover {
    background: rgba(255, 255, 255, 0.15);
    color: white;
    text-decoration: none;
    transform: translateY(-1px);
  }

  @media (max-height: 650px) {
    .auth-card {
      padding: 1.5rem 1.8rem;
    }
    
    .form-group {
      margin-bottom: 0.8rem;
    }
    
    .auth-title {
      font-size: 1.6rem;
    }
  }

  @media (max-width: 480px) {
    .auth-card {
      padding: 1.5rem;
      margin: 0.5rem;
    }
    
    .auth-title {
      font-size: 1.6rem;
    }
  }
</style>

<body>
  <div id="globe-container"></div>

  <div class="auth-container">
    <div class="auth-card">
      <h1 class="auth-title">Welcome Back</h1>
      <p class="auth-subtitle">Sign in to continue your journey</p>

      <form action="/login" method="POST" class="needs-validation" novalidate>
        <div class="form-group">
          <label for="username" class="form-label">Username</label>
          <input 
            name="username"    
            id="username"
            type="text" 
            class="form-control"
            placeholder="Enter username"
            required>
        </div>

        <div class="form-group">
          <label for="password" class="form-label">Password</label>
          <input 
            name="password"    
            id="password"
            type="password" 
            class="form-control"
            placeholder="Enter password"
            required>
        </div>

        <div class="forgot-password">
          <a href="/forgot-password">Forgot password?</a>
        </div>

        <button type="submit" class="btn-auth">Sign In</button>
      </form>

      <div class="auth-footer">
        <p>Don't have an account yet?</p>
        <a href="/signup" class="btn-secondary-auth">Create New Account</a>
      </div>
    </div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script>
    let scene, camera, renderer, globe;

    function initAuthGlobe() {
      scene = new THREE.Scene();
      camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);
      camera.position.set(200, 50, 400);
      
      const container = document.getElementById('globe-container');
      renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.setClearColor(0x000000, 0);
      container.appendChild(renderer.domElement);
      
      const geometry = new THREE.SphereGeometry(180, 40, 40);
      const material = new THREE.MeshBasicMaterial({
        color: 0x22d3ee,
        wireframe: true,
        transparent: true,
        opacity: 0.10
      });
      
      globe = new THREE.Mesh(geometry, material);
      scene.add(globe);
      
      animate();
    }

    function animate() {
      requestAnimationFrame(animate);
      if (globe) {
        globe.rotation.y += 0.001;
        globe.rotation.x += 0.0005;
      }
      renderer.render(scene, camera);
    }

    window.addEventListener('load', function() {
      setTimeout(initAuthGlobe, 100);
    });

    window.addEventListener('resize', function() {
      if (camera && renderer) {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
      }
    });
  </script>
</body>